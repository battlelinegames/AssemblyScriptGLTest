// SET THE VARIOUS LINES

//const DRAW_POINTS = memory.data<f32>([-0.5, -0.5, -0.5, 0.5, 0.5, 0.5, 0.5, -0.5]); 
// SPACE SHIP
// ship loop info first number is number of loops followed by the array sizes
      /*
      var ship_loop_color:usize=memory.data<i32>([
                    0xff_40_ff_00, // default layer color
                    0xff_40_ff_00, // hull layer color
                    0xff_00_80_ff, // orange layer color
                    0xff_00_80_ff, // orange2 layer color
                    0xff_40_80_ff, // orange3 layer color
                    0xff_ff_ff_00, // cockpit layer color
                    0xff_80_ff_80, // wing layer color
                    0xff_80_ff_80, // wing_right layer color
      ]);

      var ship_loop_info:usize=memory.data<i32>([ 8, // number of loops
                    8, // default layer loop size
                    38, // hull layer loop size
                    8, // orange layer loop size
                    8, // orange2 layer loop size
                    8, // orange3 layer loop size
                    8, // cockpit layer loop size
                    12, // wing layer loop size
                    12, // wing_right layer loop size
      ]);
      
      var default_layer:usize=memory.data<f32>([0,0.9,-0.2,0.5,0,0.4,0.2,0.5,]);


      var hull_layer:usize=memory.data<f32>([-0.2,0.5,-0.2,0.3,-0.1,0.2,-0.1,0.1,-0.2,0,-0.2,-0.2,-0.3,-0.3,-0.3,-0.5,-0.2,-0.6,0.2,-0.6,0.3,-0.5,0.3,-0.3,0.2,-0.2,0.2,0,0.1,0.1,0.1,0.2,0.2,0.3,0.2,0.5,0,0.4,]);


      var orange_layer:usize=memory.data<f32>([-0.1,0.2,0.1,0.2,0.1,0.1,-0.1,0.1,]);


      var orange2_layer:usize=memory.data<f32>([-0.3,-0.3,-0.1,-0.3,-0.1,-0.4,-0.3,-0.4,]);


      var orange3_layer:usize=memory.data<f32>([0.3,-0.3,0.1,-0.3,0.1,-0.4,0.3,-0.4,]);


      var cockpit_layer:usize=memory.data<f32>([0,0.8,-0.1,0.6,0,0.5,0.1,0.6,]);


      var wing_layer:usize=memory.data<f32>([-0.2,0,-0.6,-0.2,-0.6,-0.4,-0.3,-0.4,-0.3,-0.3,-0.2,-0.2,]);


      var wing_right_layer:usize=memory.data<f32>([0.2,0,0.6,-0.2,0.6,-0.4,0.3,-0.4,0.3,-0.3,0.2,-0.2,]);
*/

      var ship_loop_color:usize=memory.data<i32>([
                    0xff_ff_ff_ff, // default layer color
                    0xff_f9_eb_3c, // cockpit layer color
                    0xff_00_ff_00, // wings layer color
                    0xff_00_ff_00, // wings2 layer color
                    0xff_06_9b_ff, // engine layer color
                    0xff_ff_ff_ff, // deletethis layer color
                    0xff_ff_ff_ff, // recoloration layer color
      ]);
     
      var ship_loop_info:usize=memory.data<i32>([ 7, // number of loops
                    16, // default layer loop size
                    6, // cockpit layer loop size
                    6, // wings layer loop size
                    6, // wings2 layer loop size
                    10, // engine layer loop size
                    0, // deletethis layer loop size
                    8, // recoloration layer loop size
      ]);
     
      var default_layer:usize=memory.data<f32>([-0.1,0.4,-0.2,0,0,-0.3,0.2,0,0.1,0.4,0.2,0.3,0,0.9,-0.2,0.3,]);


      var cockpit_layer:usize=memory.data<f32>([-0.1,0.1,0,0.6,0.1,0.1,]);


      var wings_layer:usize=memory.data<f32>([0.7,0.2,0.2,0,0,-0.3,]);


      var wings2_layer:usize=memory.data<f32>([0,-0.3,-0.2,0,-0.7,0.2,]);


      var engine_layer:usize=memory.data<f32>([-0.1,-0.2,-0.1,-0.3,0.1,-0.3,0.1,-0.2,0,-0.6,]);


      var deletethis_layer:usize=memory.data<f32>([]);


      var recoloration_layer:usize=memory.data<f32>([0.2,0,0,-0.3,-0.2,0,0,-0.3,]);

      var loop_sizes:usize = (ship_loop_info + <usize>4);
    
@inline 
function loop_count(): i32 {
  return load<i32>(ship_loop_info);
}

@inline 
function loop_size( loop_num: i32 ): i32 {
  return load<i32>(loop_sizes + <usize>(loop_num*4));
}

@inline
function starting_point(loop_count:i32):usize {
  return loop_sizes + <usize>(loop_count * 4);
}
export function color_addr():usize {
  return ship_loop_color;
}
export function animation(theta: f32) : u32 {

  const ship_loop_count = loop_count();
  let address_ptr = starting_point( ship_loop_count );

  for( var ship_i:i32 = 0; ship_i < ship_loop_count; ship_i++) {
    let ship_loop_size: i32 = loop_size(ship_i);

    for( var i: i32 = 0; i < ship_loop_size; i += 2 ) {
      let x:f32 = load<f32>(address_ptr + <usize>(i*4));
      let y:f32 = load<f32>(address_ptr + <usize>(i*4+4));

      // x = x(cos theta) - y (sin theta)
      let x1:f32 = x * <f32>Math.cos(theta) - y * <f32>Math.sin(theta);

      // y = y(cos theta) + x (sin theta)
      let y1:f32 = y * <f32>Math.cos(theta) + x * <f32>Math.sin(theta);

      store<f32>(address_ptr + <usize>(i*4), x1);
      store<f32>(address_ptr + <usize>(i*4+4), y1);
    }

    address_ptr += ship_loop_size * 4;
  }

  return <u32>ship_loop_info;
}

